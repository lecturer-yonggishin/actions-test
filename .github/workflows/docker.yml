# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java Docker with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # 3. Docker 이미지 빌드
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo .

    # 4. DockerHub 로그인
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # 5. Docker Hub 이미지 푸시
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo
  
  deploy:
      needs: build
      runs-on: ubuntu-22.04
  
      steps:
        - uses: actions/checkout@v3
  
        - name: Run scripts in server
          uses: appleboy/ssh-action@master
          with:
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            host: ${{ secrets.REMOTE_HOST }}
            username: ${{ secrets.REMOTE_USERNAME }}
            port: 22
            script: |
              docker stop $(docker ps -a -q) 
              docker rm $(docker ps -a -q) 
              docker pull dockerlecture/github-actions-demo
              docker run -d -p 8080:8080 --name backend dockerlecture/github-actions-demo

    # WAS 인스턴스 접속 & 애플리케이션 실행
    # - name: Connect to WAS & Execute Application
    #   uses: appleboy/ssh-action@v0.1.6
    #   with:
    #     host: ${{ secrets.REMOTE_HOST }}
    #     username: ${{ secrets.REMOTE_USERNAME }}
    #     key: ${{ secrets.SSH_PRIVATE_KEY }}
    #     port: 22
    #     script: |
    #       sudo docker stop $(docker ps -a -q) 
    #       sudo docker rm $(docker ps -a -q) 
    #       sudo docker pull dockerlecture/github-actions-demo
    #       sudo docker run -d -p 8080:8080 --name backend dockerlecture/github-actions-demo
  # # 위 과정에서 푸시한 이미지를 ec2에서 풀받아서 실행시키는 과정 
  # run-docker-image-on-ec2:
  #   # build-docker-image (위)과정이 완료되어야 실행됩니다.
  #   needs: build
  #   runs-on: self-hosted

  #   steps:
  #     # 1. 최신 이미지를 풀받습니다
  #     - name: docker pull
  #       run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo
      
  #     # 2. 기존의 컨테이너를 중지시킵니다
  #     - name: docker stop container
  #       run: sudo docker stop $(sudo docker ps -q) 2>/dev/null || true

  #     # 3. 최신 이미지를 컨테이너화하여 실행시킵니다
  #     - name: docker run new container
  #       run: sudo docker run --name github-actions-demo --rm -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo

  #     # 4. 미사용 이미지를 정리합니다
  #     - name: delete old docker image
  #       run: sudo docker system prune -f
